/**
 * This is mbbox's Jenkins Pipeline Jenkinsfile.
 *
 * You can read documentation about this file at https://jenkins.io/doc/book/pipeline/jenkinsfile/.
 * A useful list of plugins can be found here: https://jenkins.io/doc/pipeline/steps/.
 *
 * It is based on the Bodhi's jenkinsfile
 */


/**
 * Run the given script on the Duffy node.
 *
 * @param script The script to run on the node.
 */
def onmyduffynode(String script) {
    timestamps {
        sh 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${DUFFY_NODE}.ci.centos.org "' + script + '"'
    }
}


/**
 * rsync the given path from the Duffy node back to the control host.
 *
 * @param rsyncpath The path to be rsync'd back to the control host.
 */
def syncfromduffynode(rsyncpath) {
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' + " ${DUFFY_NODE}.ci.centos.org:~/payload/" + rsyncpath + " ./"
}


/**
 * rsync the given path from the control host to the Duffy node.
 *
 * @param rsyncpath The path to be rsync'd to the Duffy node.
 */
def synctoduffynode(rsyncpath) {
    sh 'rsync -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root " -Ha --include=' +  rsyncpath + " ./ ${DUFFY_NODE}.ci.centos.org:~/payload/"
}


/**
 * Install test dependencies on the Duffy node.
 */
def configure_node = {
    onmyduffynode 'yum -y install epel-release'
    onmyduffynode 'yum install -y docker python36-pip python36-requests rsync'
    onmyduffynode 'systemctl start docker'
    // To run the integration testsuite
    onmyduffynode 'python3.6 -m pip install docker jmespath kubernetes molecule openshift yamllint'
}


/**
 * Run the given function up to 5 times (if it fails), with 60 seconds of sleeping in between tries.
 *
 * @param f The function to retry.
 */
def retry_with_sleep = { f ->
    try {
        f()
    } catch (error) {
        retry(4) {
            sleep(60)
            f()
        }
    }
}

node('cico-workspace') {
    checkout scm
    // diff-cover needs to be able to reference origin/develop, so let's just fetch all branches.
    sh 'git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*'
    sh 'git fetch -p --no-tags origin'

    stage('Allocate Duffy node') {
        // Get a duffy node and set the DUFFY_NODE and SSID environment variables.
        duffy_rtn=sh(
            script: 'cico --debug node get -f value -c hostname -c comment --retry-count 16 --retry-interval 60',
            returnStdout: true
            ).trim().tokenize(' ')
        env.DUFFY_NODE=duffy_rtn[0]
        env.SSID=duffy_rtn[1]
    }

    try {
        stage('Configure node'){
            retry_with_sleep(configure_node)
        }

        stage('Sync pull request to node') {
            synctoduffynode('mbbox')
        }

        stage('Run test-local with molecule for mbox-operator') {
            onmyduffynode 'cd mbbox/mbox-operator && molecule test -s test-local'
        }

    } catch (e) {
        currentBuild.result = "FAILURE"
        throw e
    } finally {
        stage('Deallocate node'){
            sh 'cico node done ${SSID}'
        }
    }
}
